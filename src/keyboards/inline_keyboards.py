from aiogram.types import InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from data import callback_data, stations, categories


def build_menu_keyboard() -> InlineKeyboardMarkup:

    builder = InlineKeyboardBuilder()
    builder.button(text='üçΩ–ö–∞—Ç–µ–≥–æ—Ä–∏–∏', callback_data=callback_data['categories_callback_data'])
    builder.button(text='‚ùì–ü–æ–º–æ—â—å', callback_data=callback_data['help_callback_data'])
    return builder.as_markup()


def build_categories_keyboard() -> InlineKeyboardMarkup:

    builder = InlineKeyboardBuilder()
    builder.button(text='üç£–°—É—à–∏', callback_data=categories['sushi_callback_data'])
    builder.button(text='üçï–ü–∏—Ü—Ü–∞', callback_data=categories['pizza_callback_data'])
    builder.button(text='üçú–ü–∞–Ω–∞–∑–∏–∞—Ç—Å–∫–∞—è –∫—É—Ö–Ω—è', callback_data=categories['asian_callback_data'])
    builder.button(text='üçΩ–†–µ—Å—Ç–æ—Ä–∞–Ω—ã', callback_data=categories['restuarants_callback_data'])
    builder.button(text='ü•£–ö–∞—Ñ–µ', callback_data=categories['cafes_callback_data'])
    builder.button(text='‚òïÔ∏è–ö–æ—Ñ–µ', callback_data=categories['coffee_callback_data'])
    builder.button(text='üçî–ë—É—Ä–≥–µ—Ä—ã', callback_data=categories['burgers_callback_data'])
    builder.button(text='üç∫–ë–∞—Ä—ã', callback_data=categories['bars_callback_data'])
    builder.button(text='üåØ–®–∞—É—Ä–º–∞', callback_data=categories['streetfood_callback_data'])
    builder.button(
        text='‚¨áÔ∏è–ù–∞–∑–∞–¥', callback_data=callback_data['back_from_categories_callback_data']
    )

    builder.adjust(2)

    return builder.as_markup()


def build_geo_back_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text='–ù–∞–∑–∞–¥', callback_data=callback_data['back_from_geo_callback_data'])
    return builder.as_markup()


def build_choose_find_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(
        text='‚ìÇÔ∏è–ü–æ–∏—Å–∫ –ø–æ —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ', callback_data=callback_data['metro_search_callback_data']
    )
    builder.button(
        text='üìç–ü–æ–∏—Å–∫ –ø–æ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏', callback_data=callback_data['geo_search_callback_data']
    )
    builder.button(
        text='‚¨áÔ∏è–ù–∞–∑–∞–¥', callback_data=callback_data['back_from_choose_find_callback_data']
    )
    builder.adjust(1)
    return builder.as_markup()


def build_choose_station_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()

    builder.button(text='üî¥–ö—Ä–∞—Å–Ω—ã–π –ø—Ä–æ—Å–ø–µ–∫—Ç', callback_data=stations['red_av'])
    builder.button(text='üî¥–ü–ª–æ—â–∞–¥—å –õ–µ–Ω–∏–Ω–∞  ', callback_data=stations['lenina'])
    builder.button(text='üî¥–ü–ª–æ—â–∞–¥—å –ú–∞—Ä–∫—Å–∞  ', callback_data=stations['marksa'])
    builder.button(text='üî¥–†–µ—á–Ω–æ–π –≤–æ–∫–∑–∞–ª   ', callback_data=stations['river_station'])
    builder.button(text='üî¥–°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∞—è    ', callback_data=stations['studentskaya'])
    builder.button(text='üî¥–ó–∞–µ–ª—å—Ü–æ–≤—Å–∫–∞—è    ', callback_data=stations['zaelcovska'])
    builder.button(text='üî¥–û–∫—Ç—è–±—Ä—å—Å–∫–∞—è     ', callback_data=stations['octoberskaya'])
    builder.button(text='üî¥–ì–∞–≥–∞—Ä–∏–Ω—Å–∫–∞—è     ', callback_data=stations['gagarinskaya'])

    builder.button(text='üü¢–ì–∞—Ä–∏–Ω–∞-–ú–∏—Ö–∞–π–ª–æ–≤—Å–∫–æ–≥–æ', callback_data=stations['garina_mihalina'])
    builder.button(text='üü¢–ë–µ—Ä–µ–∑–æ–≤–∞—è —Ä–æ—â–∞      ', callback_data=stations['bereza'])
    builder.button(text='üü¢–ó–æ–ª–æ—Ç–∞—è –Ω–∏–≤–∞        ', callback_data=stations['niva'])
    builder.button(text='üü¢–ü–æ–∫—Ä—ã—à–∫–∏–Ω–∞          ', callback_data=stations['pokrishkina'])
    builder.button(text='üü¢–°–∏–±–∏—Ä—Å–∫–∞—è           ', callback_data=stations['sibirskaya'])
    builder.button(text='‚¨áÔ∏è–ù–∞–∑–∞–¥', callback_data=callback_data['back_from_metro_callback_data'])
    builder.adjust(2)
    return builder.as_markup()


def build_choose_place(places: list) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for i, place in enumerate(places):
        builder.button(text=f'{i+1}', callback_data=place['id'])
    builder.button(text='–ù–∞–∑–∞–¥', callback_data=callback_data['back_from_choose_place_data'])
    builder.adjust(5)
    return builder.as_markup()


def build_place_info(place_id: str, user_data: dict, dest: dict) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text='–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ', url=f'https://2gis.ru/novosibirsk/firm/{place_id}')
    if 'metro' in user_data:
        builder.button(
            text='–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç',
            url=(
                'https://2gis.ru/novosibirsk/directions/points/{0}%2C{1}%3B{2}%7C{3}%2C{4}%3B{5}'
            ).format(
                user_data['user_loc']['lon'],
                user_data['user_loc']['lat'],
                user_data['user_loc']['id'],
                dest['lon'],
                dest['lat'],
                place_id,
            ),
        )
    else:
        builder.button(
            text='–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç',
            url='https://2gis.ru/novosibirsk/directions/points/{0}%2C{1}%7C{2}%2C{3}%3B{4}'.format(
                user_data['user_loc']['lon'],
                user_data['user_loc']['lat'],
                dest['lon'],
                dest['lat'],
                place_id,
            ),
        )

    return builder.as_markup()
